package com.medisanaspace.model.fixture;

import com.medisanaspace.model.Cardiodock;
import com.medisanaspace.model.base.BaseModelWithoutMeal;
import com.medisanaspace.library.RandomHelper;

import java.util.Date;

/**
 * Generator for random Cardiodock entries.
 * 
 * @author Clemens Lode, <clemens.lode@medisanaspace.com>
 * @version $Revision: 1.0 $
 */
public class CardiodockFixture {

	private final Cardiodock cardiodock;
	private final Date expectedMeasurementDate;
	private final Integer expectedActivityStatus;
	private final Integer expectedMood;
	private final String expectedNote;
	private final String expectedModuleSerialId;
	private final Integer expectedSystole;
	private final Integer expectedDiastole;
	private final Integer expectedPulse;
	private final Integer expectedSystoleTargetMin;
	private final Integer expectedSystoleTargetMax;
	private final Integer expectedDiastoleTargetMin;
	private final Integer expectedDiastoleTargetMax;
	private final Integer expectedPulseTargetMin;
	private final Integer expectedPulseTargetMax;
	private final Integer expectedType;
	private final Integer expectedArrhythmic;

	/**
	 * Constructor for CardiodockFixture.
	 * @param index int
	 * @param maxEntries int
	 * @param lastCardiodock Cardiodock
	 */
	public CardiodockFixture(final int index, final int maxEntries,
			final Cardiodock lastCardiodock) {
		this.cardiodock = new Cardiodock();

		this.expectedMeasurementDate = new Date(new Date().getTime()
				- (long) maxEntries * 3600L * 24L * 1000L + (long) index
				* 3600L * 1000L * 24L);

		this.expectedActivityStatus = RandomHelper.generateInt(
				BaseModelWithoutMeal.MIN_ACTIVITY_STATUS,
				BaseModelWithoutMeal.MAX_ACTIVITY_STATUS);
		this.expectedMood = RandomHelper.generateInt(
				BaseModelWithoutMeal.MIN_MOOD, BaseModelWithoutMeal.MAX_MOOD);
		if (RandomHelper.generateInt(10) == 0) {
			this.expectedNote = "super!";
		} else if (RandomHelper.generateInt(10) == 0) {
			this.expectedNote = "sehr gut";
		} else if (RandomHelper.generateInt(10) == 0) {
			this.expectedNote = "gut";
		} else {
			this.expectedNote = "";
		}
		this.expectedModuleSerialId = "[Autogenerated Item]";

		if (lastCardiodock == null) {
			this.expectedDiastole = 95 + RandomHelper.generateInt(0, 10);
		} else {
			Integer generatedValue = lastCardiodock.getDiastole()
					+ RandomHelper.generateInt(0, 12) - 6;
			// normalize
			if (generatedValue < 75) {
				generatedValue++;
			} else if (generatedValue > 75 && index > maxEntries / 2) {
				generatedValue--;
			}
			if (generatedValue < 70) {
				this.expectedDiastole = 70 - RandomHelper.generateInt(0, 5);
			} else if (generatedValue > 100) {
				this.expectedDiastole = 100 + RandomHelper.generateInt(0, 5);
			} else {
				this.expectedDiastole = generatedValue;
			}

		}

		Integer generatedValue = 20 + this.expectedDiastole
				+ RandomHelper.generateInt(10, 30);
		if (generatedValue < this.expectedDiastole + 10) {
			this.expectedSystole = this.expectedDiastole
					+ RandomHelper.generateInt(10, 30);
		} else if (generatedValue > 170) {
			this.expectedSystole = 170 + RandomHelper.generateInt(0, 5);
		} else if (generatedValue < 90) {
			this.expectedSystole = 90 - RandomHelper.generateInt(0, 5);
		} else {
			this.expectedSystole = generatedValue;
		}

		if (lastCardiodock == null) {
			this.expectedPulse = 90;
		} else {
			generatedValue = lastCardiodock.getPulse()
					+ RandomHelper.generateInt(0, 14) - 7;
			// normalize
			if (generatedValue < 75) {
				generatedValue++;
			} else if (generatedValue > 75 && index > maxEntries / 2) {
				generatedValue--;
			}
			if (generatedValue > Cardiodock.MAX_PULSE) {
				this.expectedPulse = Cardiodock.MAX_PULSE
						+ RandomHelper.generateInt(0, 5);
			} else if (generatedValue < Cardiodock.MIN_PULSE) {
				this.expectedPulse = Cardiodock.MIN_PULSE
						- RandomHelper.generateInt(0, 5);
			} else {
				this.expectedPulse = generatedValue;
			}
		}

		this.expectedSystoleTargetMin = Cardiodock.MIN_SYSTOLE_TARGET_MIN;
		this.expectedSystoleTargetMax = Cardiodock.MAX_SYSTOLE_TARGET_MIN;
		this.expectedDiastoleTargetMin = Cardiodock.MIN_DIASTOLE_TARGET_MIN;
		this.expectedDiastoleTargetMax = Cardiodock.MAX_DIASTOLE_TARGET_MIN;
		this.expectedPulseTargetMin = Cardiodock.MIN_PULSE_TARGET_MIN;
		this.expectedPulseTargetMax = Cardiodock.MAX_PULSE_TARGET_MAX;
		this.expectedType = RandomHelper.generateInt(5) == 0 ? 1 : 0;
		this.expectedArrhythmic = RandomHelper.generateInt(10) == 0 ? 1 : 0;

		this.cardiodock.setMeasurementDate(this.expectedMeasurementDate);
		this.cardiodock.setActivityStatus(this.expectedActivityStatus);
		this.cardiodock.setMood(this.expectedMood);
		this.cardiodock.setNote(this.expectedNote);
		this.cardiodock.setModuleSerialId(this.expectedModuleSerialId);
		this.cardiodock.setSystole(this.expectedSystole);
		this.cardiodock.setDiastole(this.expectedDiastole);
		this.cardiodock.setPulse(this.expectedPulse);

		this.cardiodock.setDiastoleTargetMax(this.expectedDiastoleTargetMax);
		this.cardiodock.setDiastoleTargetMin(this.expectedDiastoleTargetMin);

		this.cardiodock.setPulseTargetMax(this.expectedPulseTargetMax);
		this.cardiodock.setPulseTargetMin(this.expectedPulseTargetMin);
		this.cardiodock.setSystoleTargetMax(this.expectedSystoleTargetMax);
		this.cardiodock.setSystoleTargetMin(this.expectedSystoleTargetMin);
		this.cardiodock.setType(this.expectedType);
		this.cardiodock.setArrhythmic(this.expectedArrhythmic);
	}

	/**
	 * Method getExpectedMeasurementDate.
	 * @return Date
	 */
	public final Date getExpectedMeasurementDate() {
		return new Date(this.expectedMeasurementDate.getTime());
	}

	/**
	 * Method getExpectedActivityStatus.
	 * @return Integer
	 */
	public final Integer getExpectedActivityStatus() {
		return this.expectedActivityStatus;
	}

	/**
	 * Method getExpectedMood.
	 * @return Integer
	 */
	public final Integer getExpectedMood() {
		return this.expectedMood;
	}

	/**
	 * Method getExpectedNote.
	 * @return String
	 */
	public final String getExpectedNote() {
		return this.expectedNote;
	}

	/**
	 * Method getExpectedModuleSerialId.
	 * @return String
	 */
	public final String getExpectedModuleSerialId() {
		return this.expectedModuleSerialId;
	}

	/**
	 * Method getExpectedSystole.
	 * @return Integer
	 */
	public final Integer getExpectedSystole() {
		return this.expectedSystole;
	}

	/**
	 * Method getExpectedDiastole.
	 * @return Integer
	 */
	public final Integer getExpectedDiastole() {
		return this.expectedDiastole;
	}

	/**
	 * Method getExpectedPulse.
	 * @return Integer
	 */
	public final Integer getExpectedPulse() {
		return this.expectedPulse;
	}

	/**
	 * Method getExpectedSystoleTargetMin.
	 * @return Integer
	 */
	public final Integer getExpectedSystoleTargetMin() {
		return this.expectedSystoleTargetMin;
	}

	/**
	 * Method getExpectedSystoleTargetMax.
	 * @return Integer
	 */
	public final Integer getExpectedSystoleTargetMax() {
		return this.expectedSystoleTargetMax;
	}

	/**
	 * Method getExpectedDiastoleTargetMin.
	 * @return Integer
	 */
	public final Integer getExpectedDiastoleTargetMin() {
		return this.expectedDiastoleTargetMin;
	}

	/**
	 * Method getExpectedDiastoleTargetMax.
	 * @return Integer
	 */
	public final Integer getExpectedDiastoleTargetMax() {
		return this.expectedDiastoleTargetMax;
	}

	/**
	 * Method getExpectedPulseTargetMin.
	 * @return Integer
	 */
	public final Integer getExpectedPulseTargetMin() {
		return this.expectedPulseTargetMin;
	}

	/**
	 * Method getExpectedPulseTargetMax.
	 * @return Integer
	 */
	public final Integer getExpectedPulseTargetMax() {
		return this.expectedPulseTargetMax;
	}

	/**
	 * Method getCardiodock.
	 * @return Cardiodock
	 */
	public final Cardiodock getCardiodock() {
		return this.cardiodock;
	}
}
