package com.medisanaspace.model.fixture;

import com.medisanaspace.model.Targetscale;
import com.medisanaspace.model.base.BaseModel;
import com.medisanaspace.model.base.BaseModelWithoutMeal;
import com.medisanaspace.library.RandomHelper;

import java.util.Date;

/**
 * Generator for random Targetscale entries.
 * 
 * @author Clemens Lode, <clemens.lode@medisanaspace.com>
 */
public class TargetscaleFixture {

	private final Targetscale targetscale;
	private final Date expectedMeasurementDate;
	private final Integer expectedActivityStatus;
	private final Integer expectedMood;
	private final Integer expectedMealStatus;
	private final String expectedNote;
	private final String expectedModuleSerialId;
	private final Float expectedBodyWeight;
	private final Float expectedBodyFat;
	private final Float expectedBmi;
	private final Float expectedMuscleMass;
	private final Float expectedBoneMass;
	private final Float expectedBodyWater;
	private final Integer expectedKcal;
	private final Float expectedTargetWeight;
	private final Integer expectedAthletic;

	public TargetscaleFixture(final int index, final Targetscale lastTargetscale) {
		this.targetscale = new Targetscale();

		this.expectedMeasurementDate = new Date(new Date().getTime()
				- (long) index * 3600L * 24L * 1000L);
		this.expectedActivityStatus = RandomHelper.generateInt(
				BaseModelWithoutMeal.MIN_ACTIVITY_STATUS,
				BaseModelWithoutMeal.MAX_ACTIVITY_STATUS);
		this.expectedMood = RandomHelper.generateInt(
				BaseModelWithoutMeal.MIN_MOOD, BaseModelWithoutMeal.MAX_MOOD);
		this.expectedNote = "";
		this.expectedModuleSerialId = "[Autogenerated Item]";

		this.expectedMealStatus = RandomHelper.generateInt(
				BaseModel.MIN_MEAL_STATUS, BaseModel.MAX_MEAL_STATUS);

		if (lastTargetscale == null) {
			this.expectedBodyWeight = 65f + RandomHelper.generateFloat(0, 10);
		} else {
			final Float generatedValue = lastTargetscale.getBodyWeight()
					+ RandomHelper.generateFloat(0, 4) - 2.0f;
			if (generatedValue < 60f) {
				this.expectedBodyWeight = 60f - RandomHelper
						.generateFloat(0, 2);
			} else if (generatedValue > 120f) {
				this.expectedBodyWeight = 120f + RandomHelper.generateFloat(0,
						2);
			} else {
				this.expectedBodyWeight = generatedValue;
			}
		}

		if (lastTargetscale == null) {
			this.expectedBodyFat = 15f + RandomHelper.generateFloat(0, 4);
		} else {
			final Float generatedValue = lastTargetscale.getBodyFat()
					+ RandomHelper.generateFloat(0, 4) - 2f;
			if (generatedValue < 12f) {
				this.expectedBodyFat = 12f - RandomHelper.generateFloat(0, 2);
			} else if (generatedValue > 30f) {
				this.expectedBodyFat = 30f + RandomHelper.generateFloat(0, 2);
			} else {
				this.expectedBodyFat = generatedValue;
			}
		}
		this.expectedBmi = this.expectedBodyWeight / (1.8f * 1.8f);

		if (lastTargetscale == null) {
			this.expectedMuscleMass = 38f + RandomHelper.generateFloat(0, 4);
		} else {
			final Float generatedValue = lastTargetscale.getMuscleMass()
					+ RandomHelper.generateFloat(0, 3) - 1.5f;
			if (generatedValue < 30f) {
				this.expectedMuscleMass = 30f - RandomHelper
						.generateFloat(0, 2);
			} else if (generatedValue > 44f) {
				this.expectedMuscleMass = 44f + RandomHelper
						.generateFloat(0, 2);
			} else {
				this.expectedMuscleMass = generatedValue;
			}
		}
		this.expectedBoneMass = 5.2f;

		if (lastTargetscale == null) {
			this.expectedBodyWater = 58f + RandomHelper.generateFloat(0, 4);
		} else {
			final Float generatedValue = lastTargetscale.getBodyWater()
					+ RandomHelper.generateFloat(0, 4) - 2f;
			if (this.expectedBodyWater < 50f) {
				this.expectedBodyWater = 50f - RandomHelper.generateFloat(0, 2);
			} else if (this.expectedBodyWater > 80f) {
				this.expectedBodyWater = 80f + RandomHelper.generateFloat(0, 2);
			} else {
				this.expectedBodyWater = generatedValue;
			}
		}

		if (lastTargetscale == null) {
			this.expectedKcal = 1450 + RandomHelper.generateInt(0, 100);
		} else {
			final Integer generatedValue = lastTargetscale.getKcal()
					+ RandomHelper.generateInt(0, 20) - 10;
			if (generatedValue < 1300) {
				this.expectedKcal = 1300 - RandomHelper.generateInt(0, 10);
			} else if (generatedValue > 1700) {
				this.expectedKcal = 1700 + RandomHelper.generateInt(0, 10);
			} else {
				this.expectedKcal = generatedValue;
			}
		}

		this.expectedTargetWeight = 70.0f;
		this.expectedAthletic = 0;

		this.targetscale.setActivityStatus(this.expectedActivityStatus);
		this.targetscale.setAthletic(this.expectedAthletic);
		this.targetscale.setBmi(this.expectedBmi);
		this.targetscale.setBodyFat(this.expectedBodyFat);
		this.targetscale.setBodyWater(this.expectedBodyWater);
		this.targetscale.setBodyWeight(this.expectedBodyWeight);
		this.targetscale.setBoneMass(this.expectedBoneMass);
		this.targetscale.setKcal(this.expectedKcal);
		this.targetscale.setMealStatus(this.expectedMealStatus);
		this.targetscale.setMeasurementDate(this.expectedMeasurementDate);
		this.targetscale.setMood(this.expectedMood);
		this.targetscale.setMuscleMass(this.expectedMuscleMass);
		this.targetscale.setNote(this.expectedNote);
		this.targetscale.setModuleSerialId(this.expectedModuleSerialId);
		this.targetscale.setTargetWeight(this.expectedTargetWeight);
	}

	public final Targetscale getTargetscale() {
		return this.targetscale;
	}

	public final Date getExpectedMeasurementDate() {
		return new Date(this.expectedMeasurementDate.getTime());
	}

	public final Integer getExpectedActivityStatus() {
		return this.expectedActivityStatus;
	}

	public final Integer getExpectedMood() {
		return this.expectedMood;
	}

	public final Integer getExpectedMealStatus() {
		return this.expectedMealStatus;
	}

	public final String getExpectedNote() {
		return this.expectedNote;
	}

	public final String getExpectedModuleSerialId() {
		return this.expectedModuleSerialId;
	}

	public final Float getExpectedBodyWeight() {
		return this.expectedBodyWeight;
	}

	public final Float getExpectedBodyFat() {
		return this.expectedBodyFat;
	}

	public final Float getExpectedBmi() {
		return this.expectedBmi;
	}

	public final Float getExpectedMuscleMass() {
		return this.expectedMuscleMass;
	}

	public final Float getExpectedBoneMass() {
		return this.expectedBoneMass;
	}

	public final Float getExpectedBodyWater() {
		return this.expectedBodyWater;
	}

	public final Integer getExpectedKcal() {
		return this.expectedKcal;
	}

	public final Float getExpectedTargetWeight() {
		return this.expectedTargetWeight;
	}

	public final Integer getExpectedAthletic() {
		return this.expectedAthletic;
	}
}
