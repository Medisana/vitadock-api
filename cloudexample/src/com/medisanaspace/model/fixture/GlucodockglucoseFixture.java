package com.medisanaspace.model.fixture;

import com.medisanaspace.model.Glucodockglucose;
import com.medisanaspace.model.base.BaseModel;
import com.medisanaspace.model.base.BaseModelWithoutMeal;

import com.medisanaspace.library.RandomHelper;
import java.util.Date;

/**
 * Generator for random Glucodockglucose entries.
 * 
 * @author Clemens Lode, <clemens.lode@medisanaspace.com>
 */
public class GlucodockglucoseFixture {

	private final Glucodockglucose glucodockGlucose;
	private final Date expectedMeasurementDate;
	private final Integer expectedActivityStatus;
	private final Integer expectedMood;
	private final String expectedNote;
	private final String expectedModuleSerialId;
	private final Integer expectedBloodGlucose;
	private final Integer expectedBloodGlucoseTargetMin;
	private final Integer expectedBloodGlucoseTargetMax;
	private final Integer expectedMealStatus;

	public GlucodockglucoseFixture(final int index,
			final Glucodockglucose lastGlucodockglucose) {
		this.glucodockGlucose = new Glucodockglucose();

		this.expectedMeasurementDate = new Date(new Date().getTime()
				- (long) index * 3600L * 24L * 1000L);

		this.expectedActivityStatus = RandomHelper.generateInt(
				BaseModelWithoutMeal.MIN_ACTIVITY_STATUS,
				BaseModelWithoutMeal.MAX_ACTIVITY_STATUS);
		this.expectedMood = RandomHelper.generateInt(
				BaseModelWithoutMeal.MIN_MOOD, BaseModelWithoutMeal.MAX_MOOD);
		this.expectedNote = ""; // to test utf8
		this.expectedModuleSerialId = "[Autogenerated Item]";
		this.expectedMealStatus = RandomHelper.generateInt(
				BaseModel.MIN_MEAL_STATUS, BaseModel.MAX_MEAL_STATUS);

		if (lastGlucodockglucose == null) {
			this.expectedBloodGlucose = 95 + RandomHelper.generateInt(0, 10);
		} else {
			Integer generatedValue = lastGlucodockglucose.getBloodGlucose()
					+ RandomHelper.generateInt(0, 10) - 5;
			if (generatedValue < 50) {
				this.expectedBloodGlucose = 50 - RandomHelper.generateInt(0, 2);
			} else if (generatedValue > 140) {
				this.expectedBloodGlucose = 140 + RandomHelper
						.generateInt(0, 2);
			} else {
				this.expectedBloodGlucose = generatedValue;
			}
		}

		this.expectedBloodGlucoseTargetMin = Glucodockglucose.MIN_BLOOD_GLUCOSE_TARGET_MIN;
		this.expectedBloodGlucoseTargetMax = Glucodockglucose.MAX_BLOOD_GLUCOSE_TARGET_MIN;

		this.glucodockGlucose.setMeasurementDate(this.expectedMeasurementDate);
		this.glucodockGlucose.setActivityStatus(this.expectedActivityStatus);
		this.glucodockGlucose.setMood(this.expectedMood);
		this.glucodockGlucose.setNote(this.expectedNote);
		this.glucodockGlucose.setModuleSerialId(this.expectedModuleSerialId);
		this.glucodockGlucose.setMealStatus(this.expectedMealStatus);

		this.glucodockGlucose.setBloodGlucose(this.expectedBloodGlucose);
		this.glucodockGlucose
				.setBloodGlucoseTargetMax(this.expectedBloodGlucoseTargetMax);
		this.glucodockGlucose
				.setBloodGlucoseTargetMin(this.expectedBloodGlucoseTargetMin);
	}

	public final Date getExpectedMeasurementDate() {
		return new Date(this.expectedMeasurementDate.getTime());
	}

	public final Integer getExpectedActivityStatus() {
		return this.expectedActivityStatus;
	}

	public final Integer getExpectedMood() {
		return this.expectedMood;
	}

	public final String getExpectedNote() {
		return this.expectedNote;
	}

	public final String getExpectedModuleSerialId() {
		return this.expectedModuleSerialId;
	}

	public final Integer getExpectedBloodGlucose() {
		return this.expectedBloodGlucose;
	}

	public final Integer getExpectedBloodGlucoseTargetMin() {
		return this.expectedBloodGlucoseTargetMin;
	}

	public final Integer getExpectedBloodGlucoseTargetMax() {
		return this.expectedBloodGlucoseTargetMax;
	}

	public final Integer getExpectedMealStatus() {
		return this.expectedMealStatus;
	}

	public final Glucodockglucose getGlucodockglucose() {
		return this.glucodockGlucose;
	}
}
