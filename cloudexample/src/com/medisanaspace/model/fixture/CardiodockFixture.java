package com.medisanaspace.model.fixture;

import com.medisanaspace.model.Cardiodock;
import com.medisanaspace.model.base.BaseModelWithoutMeal;
import com.medisanaspace.library.RandomHelper;

import java.util.Date;

/**
 * Generator for random Cardiodock entries.
 * 
 * @author Clemens Lode, <clemens.lode@medisanaspace.com>
 */
public class CardiodockFixture {

	private Cardiodock cardiodock = null;
	private Date expectedMeasurementDate;
	private Integer expectedActivityStatus;
	private Integer expectedMood;
	private String expectedNote;
	private String expectedModuleSerialId;
	private Integer expectedSystole;
	private Integer expectedDiastole;
	private Integer expectedPulse;
	private Integer expectedSystoleTargetMin;
	private Integer expectedSystoleTargetMax;
	private Integer expectedDiastoleTargetMin;
	private Integer expectedDiastoleTargetMax;
	private Integer expectedPulseTargetMin;
	private Integer expectedPulseTargetMax;
	private Integer expectedType;
	private Integer expectedArrhythmic;

	public CardiodockFixture(final int index, final Cardiodock lastCardiodock) {
		this.cardiodock = new Cardiodock();

		this.expectedMeasurementDate = new Date(new Date().getTime()
				- (long) index * 3600L * 1000L * 24L);

		this.expectedActivityStatus = RandomHelper.generateLong(
				BaseModelWithoutMeal.MIN_ACTIVITY_STATUS,
				BaseModelWithoutMeal.MAX_ACTIVITY_STATUS);
		this.expectedMood = RandomHelper.generateLong(
				BaseModelWithoutMeal.MIN_MOOD, BaseModelWithoutMeal.MAX_MOOD);
		this.expectedNote = "";
		this.expectedModuleSerialId = "[Autogenerated Item]";

		this.expectedDiastole = RandomHelper.generateLong(
				Cardiodock.MIN_DIASTOLE, Cardiodock.MAX_DIASTOLE);

		if (lastCardiodock == null) {
			this.expectedDiastole = 60 + RandomHelper.generateInt(0, 10);
		} else {
			this.expectedDiastole = lastCardiodock.getDiastole()
					+ RandomHelper.generateInt(0, 20) - 10;
			if (this.expectedDiastole < 50) {
				this.expectedDiastole = 50 - RandomHelper.generateInt(0, 5);
			} else if (this.expectedDiastole > 100) {
				this.expectedDiastole = 100 + RandomHelper.generateInt(0, 5);
			}
		}

		this.expectedSystole = 70 + this.expectedDiastole
				+ RandomHelper.generateLong(10, 60);
		if(this.expectedSystole < this.expectedDiastole + 10) {
			this.expectedSystole = this.expectedDiastole + RandomHelper.generateLong(10, 30);
		} else if (this.expectedSystole > 170) {
			this.expectedSystole = 170 + RandomHelper.generateLong(0, 5);
		} else if (this.expectedSystole < 80) {
			this.expectedSystole = 80 - RandomHelper.generateLong(0, 5);
		}

		this.expectedPulse = RandomHelper.generateLong(Cardiodock.MIN_PULSE,
				Cardiodock.MAX_PULSE);
		this.expectedSystoleTargetMin = Cardiodock.MIN_SYSTOLE_TARGET_MIN;
		this.expectedSystoleTargetMax = Cardiodock.MAX_SYSTOLE_TARGET_MIN;
		this.expectedDiastoleTargetMin = Cardiodock.MIN_DIASTOLE_TARGET_MIN;
		this.expectedDiastoleTargetMax = Cardiodock.MAX_DIASTOLE_TARGET_MIN;
		this.expectedPulseTargetMin = Cardiodock.MIN_PULSE_TARGET_MIN;
		this.expectedPulseTargetMax = Cardiodock.MAX_PULSE_TARGET_MAX;
		this.expectedType = RandomHelper.generateInt(5) == 0 ? 1 : 0;
		this.expectedArrhythmic = RandomHelper.generateInt(10) == 0 ? 1 : 0;

		this.cardiodock.setMeasurementDate(this.expectedMeasurementDate);
		this.cardiodock.setActivityStatus(this.expectedActivityStatus);
		this.cardiodock.setMood(this.expectedMood);
		this.cardiodock.setNote(this.expectedNote);
		this.cardiodock.setModuleSerialId(this.expectedModuleSerialId);
		this.cardiodock.setSystole(this.expectedSystole);
		this.cardiodock.setDiastole(this.expectedDiastole);
		this.cardiodock.setPulse(this.expectedPulse);

		this.cardiodock.setDiastoleTargetMax(this.expectedDiastoleTargetMax);
		this.cardiodock.setDiastoleTargetMin(this.expectedDiastoleTargetMin);

		this.cardiodock.setPulseTargetMax(this.expectedPulseTargetMax);
		this.cardiodock.setPulseTargetMin(this.expectedPulseTargetMin);
		this.cardiodock.setSystoleTargetMax(this.expectedSystoleTargetMax);
		this.cardiodock.setSystoleTargetMin(this.expectedSystoleTargetMin);
		this.cardiodock.setType(this.expectedType);
		this.cardiodock.setArrhythmic(this.expectedArrhythmic);
	}

	public final Date getExpectedMeasurementDate() {
		return new Date(this.expectedMeasurementDate.getTime());
	}

	public final Integer getExpectedActivityStatus() {
		return this.expectedActivityStatus;
	}

	public final Integer getExpectedMood() {
		return this.expectedMood;
	}

	public final String getExpectedNote() {
		return this.expectedNote;
	}

	public final String getExpectedModuleSerialId() {
		return this.expectedModuleSerialId;
	}

	public final Integer getExpectedSystole() {
		return this.expectedSystole;
	}

	public final Integer getExpectedDiastole() {
		return this.expectedDiastole;
	}

	public final Integer getExpectedPulse() {
		return this.expectedPulse;
	}

	public final Integer getExpectedSystoleTargetMin() {
		return this.expectedSystoleTargetMin;
	}

	public final Integer getExpectedSystoleTargetMax() {
		return this.expectedSystoleTargetMax;
	}

	public final Integer getExpectedDiastoleTargetMin() {
		return this.expectedDiastoleTargetMin;
	}

	public final Integer getExpectedDiastoleTargetMax() {
		return this.expectedDiastoleTargetMax;
	}

	public final Integer getExpectedPulseTargetMin() {
		return this.expectedPulseTargetMin;
	}

	public final Integer getExpectedPulseTargetMax() {
		return this.expectedPulseTargetMax;
	}

	public final Cardiodock getCardiodock() {
		return this.cardiodock;
	}
}
